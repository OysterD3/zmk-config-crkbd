/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <280>;
    flavor = "balanced";
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
};

&lt {
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
};

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        Caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <19 16>;
        };

        Screenshot_capture {
            bindings = <&kp LG(LC(LS(NUMBER_4)))>;
            key-positions = <1 2>;
        };

        Toggle_navigation {
            bindings = <&tog 4>;
            key-positions = <38 39>;
        };

        language_switcher {
            bindings = <&kp LC(SPACE)>;
            key-positions = <37 40>;
            timeout-ms = <100>;
        };
    };

    macros {
        delete_all_buffer: close_off_buffer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp SPACE &kp B &kp O>;
            label = "CLOSE_OFF_BUFFER";
        };

        delete_current_buffer: delete_current_buffer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp SPACE &kp B &kp D>;
            label = "DELETE_CURRENT_BUFFER";
        };

        next_buffer: next_buffer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp RIGHT_BRACKET &kp B>;
            label = "NEXT_BUFFER";
        };

        prev_buffer: prev_buffer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp LEFT_BRACKET &kp B>;
            label = "PREV_BUFFER";
        };

        prev_error: prev_error {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp LEFT_BRACKET &kp E>;
            label = "PREV_ERROR";
        };

        next_error: next_error {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp RIGHT_BRACKET &kp E>;
            label = "NEXT_ERROR";
        };

        move_downward: move_downward {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp LA(J)>;
            label = "MOVE_DOWNWARD";
        };

        move_upward: move_upward {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp LA(K)>;
            label = "MOVE_UPWARD";
        };

        save: save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp COLON &kp W &kp ENTER>;
            label = "SAVE";
        };

        exit: exit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp COLON &kp Q &kp ENTER>;
            label = "EXIT";
        };

        go_to_left: go_to_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp LC(H)>;
            label = "GO_TO_LEFT";
        };

        go_to_right: go_to_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp LC(L)>;
            label = "GO_TO_RIGHT";
        };

        cmo: cmo {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER>;

            label = "CMO";
        };
    };

    behaviors {
        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mods Left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            hold-trigger-on-release;
        };

        hrmr: hrmr {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mods Right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "Smart Shift";
            bindings = <&sk RSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        num_dance: num_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "Number Tap Dance";
            #binding-cells = <0>;
            tapping-term-ms = <280>;
            bindings = <&kp TAB>, <&tog 1>;
        };

        smart_num: smart_num {
            compatible = "zmk,behavior-hold-tap";
            label = "Smart Number";
            bindings = <&mo>, <&num_dance>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
        };

        bkspc_del: bkspc_del {
            compatible = "zmk,behavior-mod-morph";
            label = "Backspace Delete";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&kp ESCAPE  &kp Q             &kp W          &kp E             &kp R           &kp T          &kp Y        &kp U            &kp I            &kp O        &kp P                      &bkspc_del
&kp TAB     &mt LEFT_SHIFT A  &hrml LCTRL S  &hrml LEFT_ALT D  &hrml LGUI F    &kp G          &kp H        &mt RIGHT_GUI J  &mt RIGHT_ALT K  &mt RCTRL L  &mt RIGHT_SHIFT SEMICOLON  &kp SQT
&mo 3       &kp Z             &kp X          &kp C             &kp V           &kp B          &kp N        &kp M            &kp COMMA        &kp DOT      &kp FSLH                   &kp ENTER
                                             &kp ESCAPE        &smart_num 1 0  &lt 4 SPACE    &lt 2 SPACE  &lt 3 ENTER      &smart_shift
            >;
        };

        number_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    |BTCLR|     | SPC |   | ENT |     | ALT |

            label = "Number";
            bindings = <
&trans      &kp N1        &kp N2        &kp N3        &kp N4    &kp N5       &kp N6           &kp N7                &kp N8                &kp N9                 &kp N0              &kp BSPC
&trans      &kp LSHFT     &kp LCTRL     &kp LALT      &kp LGUI  &trans       &kp KP_MULTIPLY  &mt RCMD KP_NUMBER_4  &mt RALT KP_NUMBER_5  &mt RCTRL KP_NUMBER_6  &mt RSHIFT KP_PLUS  &kp KP_EQUAL
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans    &trans       &kp KP_DIVIDE    &kp KP_NUMBER_1       &kp KP_NUMBER_2       &kp KP_NUMBER_3        &kp KP_SUBTRACT     &trans
                                        &kp ESCAPE    &to 0     &kp SPACE    &kp BACKSPACE    &kp KP_DOT            &kp KP_NUMBER_0
            >;
        };

        symbol_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Symbol";
            bindings = <
&kp GRAVE  &kp EXCL              &kp AT              &kp HASH            &kp DLLR                 &kp PRCNT        &kp CARET         &kp AMPS                       &kp KP_MULTIPLY          &kp LPAR                 &kp RPAR   &kp BSPC
&trans     &mt LEFT_SHIFT TILDE  &mt LCTRL QUESTION  &mt LEFT_ALT SLASH  &mt LEFT_GUI LEFT_BRACE  &kp LBKT         &kp RBKT          &mt RIGHT_COMMAND RIGHT_BRACE  &mt RIGHT_ALT BACKSLASH  &mt RIGHT_CONTROL MINUS  &kp PLUS   &kp PIPE
&trans     &trans                &trans              &trans              &trans                   &kp LESS_THAN    &kp GREATER_THAN  &trans                         &trans                   &kp UNDERSCORE           &kp EQUAL  &trans
                                                     &kp LEFT_CONTROL    &kp LEFT_COMMAND         &trans           &trans            &trans                         &kp RALT
            >;
        };

        function_layer {
            bindings = <
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &kp C_BRIGHTNESS_INC    &kp C_MUTE         &kp C_VOL_DN              &kp C_VOLUME_UP  &trans  &kp DEL    &kp HOME
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &kp C_BRIGHTNESS_DEC    &kp LC(LG(SPACE))  &kp LG(LC(LS(NUMBER_4)))  &trans           &trans  &kp PG_UP  &trans
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans                  &kp C_PREV         &kp C_PLAY_PAUSE          &kp C_NEXT       &trans  &kp PG_DN  &kp END
                         &trans   &trans   &trans                  &trans             &trans                    &trans
            >;

            label = "Function";
        };

        navigation_layer {
            bindings = <
&trans        &kp LG(X)           &kp LG(C)               &prev_error   &next_error   &kp LG(V)                   &trans                     &go_to_left  &kp UP_ARROW  &go_to_right  &trans         &trans
&exit         &delete_all_buffer  &delete_current_buffer  &prev_buffer  &next_buffer  &kp LG(LS(LEFT_BRACKET))    &kp LG(LS(RIGHT_BRACKET))  &kp LEFT     &kp DOWN      &kp RIGHT     &kp PAGE_UP    &move_upward
&kp LC(LEFT)  &kp LC(RIGHT)       &trans                  &trans        &save         &trans                      &kp V                      &kp W        &kp B         &kp E         &kp PAGE_DOWN  &move_downward
                                                          &trans        &trans        &trans                      &trans                     &trans       &trans
            >;

            label = "Navigation";
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "Mouse";
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
